{"ast":null,"code":"var _jsxFileName = \"/Users/drake/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/YourBotArmy.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport BotCard from \"./BotCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction YourBotArmy({\n  selectedBots,\n  setSelectedBots\n}) {\n  _s();\n  const addToBotArmy = bot => {\n    setSelectedBots(prevBots => [...prevBots, bot]);\n  };\n  const removeFromBotArmy = botId => {\n    setSelectedBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n  };\n  useEffect(() => {\n    fetch('http://localhost:8002/bots').then(response => response.json()).then(data => setSelectedBots(data)).catch(error => console.error('Error fetching bots:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui segment inverted olive bot-army\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui five column grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row bot-army-row\",\n        children: \"Your Bot Army\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row bot-army-row\",\n        children: selectedBots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n          bot: bot,\n          onDelete: () => removeFromBotArmy(bot.id),\n          onAddToArmy: () => addToBotArmy(bot)\n        }, bot.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(YourBotArmy, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = YourBotArmy;\nexport default YourBotArmy;\nvar _c;\n$RefreshReg$(_c, \"YourBotArmy\");","map":{"version":3,"names":["React","BotCard","jsxDEV","_jsxDEV","YourBotArmy","selectedBots","setSelectedBots","_s","addToBotArmy","bot","prevBots","removeFromBotArmy","botId","filter","id","useEffect","fetch","then","response","json","data","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onDelete","onAddToArmy","_c","$RefreshReg$"],"sources":["/Users/drake/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/YourBotArmy.js"],"sourcesContent":["import React from \"react\";\nimport BotCard from \"./BotCard\";\n\nfunction YourBotArmy({ selectedBots, setSelectedBots }) {\n  const addToBotArmy = (bot) => {\n    setSelectedBots(prevBots => [...prevBots, bot]);\n  };\n\n  const removeFromBotArmy = (botId) => {\n    setSelectedBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:8002/bots')\n      .then(response => response.json())\n      .then(data => setSelectedBots(data))\n      .catch(error => console.error('Error fetching bots:', error));\n  }, []);\n\n  return (\n    <div className=\"ui segment inverted olive bot-army\">\n      <div className=\"ui five column grid\">\n        <div className=\"row bot-army-row\">\n          Your Bot Army\n        </div>\n        <div className=\"row bot-army-row\">\n          {selectedBots.map(bot => (\n            <BotCard\n              key={bot.id}\n              bot={bot}\n              onDelete={() => removeFromBotArmy(bot.id)}\n              onAddToArmy={() => addToBotArmy(bot)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default YourBotArmy;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,WAAWA,CAAC;EAAEC,YAAY;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAMC,YAAY,GAAIC,GAAG,IAAK;IAC5BH,eAAe,CAACI,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAED,GAAG,CAAC,CAAC;EACjD,CAAC;EAED,MAAME,iBAAiB,GAAIC,KAAK,IAAK;IACnCN,eAAe,CAACI,QAAQ,IAAIA,QAAQ,CAACG,MAAM,CAACJ,GAAG,IAAIA,GAAG,CAACK,EAAE,KAAKF,KAAK,CAAC,CAAC;EACvE,CAAC;EAEDG,SAAS,CAAC,MAAM;IACdC,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAId,eAAe,CAACc,IAAI,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA;IAAKqB,SAAS,EAAC,oCAAoC;IAAAC,QAAA,eACjDtB,OAAA;MAAKqB,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClCtB,OAAA;QAAKqB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAElC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN1B,OAAA;QAAKqB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAC9BpB,YAAY,CAACyB,GAAG,CAACrB,GAAG,iBACnBN,OAAA,CAACF,OAAO;UAENQ,GAAG,EAAEA,GAAI;UACTsB,QAAQ,EAAEA,CAAA,KAAMpB,iBAAiB,CAACF,GAAG,CAACK,EAAE,CAAE;UAC1CkB,WAAW,EAAEA,CAAA,KAAMxB,YAAY,CAACC,GAAG;QAAE,GAHhCA,GAAG,CAACK,EAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIZ,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CAnCQH,WAAW;AAAA6B,EAAA,GAAX7B,WAAW;AAqCpB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}