{"ast":null,"code":"var _jsxFileName = \"/Users/drake/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport BotCard from \"./BotCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotCollection() {\n  _s();\n  const [bots, setBots] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8002/bots').then(response => response.json()).then(data => setBots(data)).catch(error => console.error('Error fetching bots:', error));\n  }, []);\n  const handleDelete = botId => {\n    // Make a DELETE request to the server to delete the bot from the database\n    fetch(`http://localhost:8002/bots/${botId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to delete bot');\n      }\n      // If the bot is successfully deleted from the server, update the state to remove it from the UI\n      setBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n    }).catch(error => console.error('Error deleting bot:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui four column grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: bots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n        bot: bot,\n        onDelete: () => handleDelete(bot.id)\n      }, bot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(BotCollection, \"HLWYdwhjlsHzdjlYtqtFyxxPKrE=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useEffect","useState","BotCard","jsxDEV","_jsxDEV","BotCollection","_s","bots","setBots","fetch","then","response","json","data","catch","error","console","handleDelete","botId","method","ok","Error","prevBots","filter","bot","id","className","children","map","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drake/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotCollection.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport BotCard from \"./BotCard\";\n\nfunction BotCollection() {\n  const [bots, setBots] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:8002/bots')\n      .then(response => response.json())\n      .then(data => setBots(data))\n      .catch(error => console.error('Error fetching bots:', error));\n  }, []);\n\n  const handleDelete = (botId) => {\n    // Make a DELETE request to the server to delete the bot from the database\n    fetch(`http://localhost:8002/bots/${botId}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to delete bot');\n        }\n        // If the bot is successfully deleted from the server, update the state to remove it from the UI\n        setBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n      })\n      .catch(error => console.error('Error deleting bot:', error));\n  };\n\n  return (\n    <div className=\"ui four column grid\">\n      <div className=\"row\">\n        {bots.map(bot => (\n          <BotCard key={bot.id} bot={bot} onDelete={() => handleDelete(bot.id)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,OAAO,CAACK,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACAT,KAAK,CAAE,8BAA6BS,KAAM,EAAC,EAAE;MAC3CC,MAAM,EAAE;IACV,CAAC,CAAC,CACCT,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA;MACAb,OAAO,CAACc,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKP,KAAK,CAAC,CAAC;IAC/D,CAAC,CAAC,CACDJ,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAChE,CAAC;EAED,oBACEX,OAAA;IAAKsB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCvB,OAAA;MAAKsB,SAAS,EAAC,KAAK;MAAAC,QAAA,EACjBpB,IAAI,CAACqB,GAAG,CAACJ,GAAG,iBACXpB,OAAA,CAACF,OAAO;QAAcsB,GAAG,EAAEA,GAAI;QAACK,QAAQ,EAAEA,CAAA,KAAMZ,YAAY,CAACO,GAAG,CAACC,EAAE;MAAE,GAAvDD,GAAG,CAACC,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmD,CACxE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3B,EAAA,CAlCQD,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAoCtB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}